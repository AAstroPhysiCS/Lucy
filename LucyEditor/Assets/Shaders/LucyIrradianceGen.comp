//type compute
#version 450
#extension GL_EXT_control_flow_attributes : enable

#include "LucyComputeUtilities"

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout (set = 0, binding = 0, rgba32f) readonly uniform imageCube u_EnvironmentMap;
layout (set = 0, binding = 1, rgba16f) writeonly uniform imageCube u_EnvironmentIrradianceMap;

void main() {
    const vec2 cubemapSize = vec2(imageSize(u_EnvironmentMap));

    uvec2 threadID = gl_GlobalInvocationID.xy;
    int face = int(gl_WorkGroupID.z);
    
    vec3 samplingPos = threadIDToSamplingPos(threadID, face, cubemapSize);
    
	vec3 normal = normalize(samplingPos);
    vec3 right = cross(vec3(0.0f, 1.0f, 0.0f), normal);
    vec3 up = cross(normal, right);

    vec3 irradiance = vec3(0.0);
    const float sampleDelta = 0.025f;

    const int phiSteps = int(TWO_PI / sampleDelta);
    const int thetaSteps = int(HALF_PI / sampleDelta);

    [[unroll]]
    for (float phiStep = 0.0f; phiStep < phiSteps; phiStep++) {
        float phi = phiStep * sampleDelta;

        float sinPhi = sin(phi);
        float cosPhi = cos(phi);

        [[unroll]]
		for (float thetaStep = 0.0f; thetaStep < thetaSteps; thetaStep++) {
            float theta = thetaStep * sampleDelta;

            float sinTheta = sin(theta);
            float cosTheta = cos(theta);

            // Hemisphere sample in tangent space
            vec3 tangentSample = vec3(
                sinTheta * cosPhi,
                sinTheta * sinPhi,
                cosTheta
            );

            vec3 sampleDir = normalize(
                tangentSample.x * right +
                tangentSample.y * up +
                tangentSample.z * normal
            );

            // Branchless cube map sampling
            vec2 uv = projectToFacePlane(sampleDir, face);
            uv = (uv + 1.0) * 0.5 * cubemapSize;
            ivec3 srcCoord = ivec3(clamp(uv, vec2(0), cubemapSize - 1.0), face);
            
            irradiance += imageLoad(u_EnvironmentMap, srcCoord).rgb * cosTheta * sinTheta;

            //vec3 sphereCoord = vec3(sinTheta * cosPhi, sinTheta * sinPhi, cosTheta);
			//vec3 sampleVector = sphereCoord.x * rightVector + sphereCoord.y * upVector + sphereCoord.z * normalVector;
            //
            //ivec3 sampleCoord = sampleVectorToFaceUV(sampleVector, face, cubemapSize);
            //
            //irradianceColor += imageLoad(u_EnvironmentMap, sampleCoord).rgb * cosTheta * sinTheta;
		}
	}

    // Final integration
    irradiance *= PI / float(phiSteps * thetaSteps);
    imageStore(u_EnvironmentIrradianceMap, ivec3(threadID, face), vec4(irradiance, 1.0));
}
