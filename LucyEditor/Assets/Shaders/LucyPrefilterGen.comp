//type compute
#version 450

#include "LucySamplingUtilities"
#include "LucyComputeUtilities"

layout (local_size_x = 32, local_size_y = 32) in;

layout (set = 0, binding = 0) uniform samplerCube u_EnvironmentMap;
layout (set = 0, binding = 1, rgba32f) writeonly uniform imageCube u_EnvironmentPrefilterMap;

layout (push_constant) uniform LucyPrefilterParams {
    //x, y => width, height of mipmap
    //z => roughnessValue;
    vec4 u_PrefilterParams;
};

void main() {
    const vec2 cubemapSize = vec2(1024, 1024);
    const float originalSamples = cubemapSize.x * cubemapSize.y;
    const uint totalSamples = 1024u;

    vec2 currentMipMapSize = u_PrefilterParams.xy;
    float currentRoughnessValue = u_PrefilterParams.z;

    ivec3 cubeCoord = ivec3(gl_GlobalInvocationID);
    vec3 worldPos = cubeCoordToWorld(cubeCoord, currentMipMapSize);

    vec3 N = normalize(worldPos);
    // assume view direction always equal to outgoing direction
    vec3 R = N;
    vec3 V = N;

    float roughness = max(currentRoughnessValue, 0.04);
    float totalWeight = 0.0f;
    vec3 outputColor = vec3(0.0f);

    for (uint i = 0; i < totalSamples; i++) {
        vec2 Xi = Hammersley(i, totalSamples);
        vec3 H = ImportanceSampleGGX(Xi, N, roughness);
        float dotHV = dot(H, V);
        vec3 L = normalize(2.0 * dotHV * H - V);

        float dotNL = max(dot(N, L), 0.0);
        if(dotNL > 0.0) {
           float dotNH = max(dot(N, H), 0.0);
           dotHV = max(dotHV, 0.0);

           float D = DistributionGGX(dotNH, roughness);
           float pdf = D * dotNH / (4.0 * dotHV) + 0.0001; 

           float saTexel  = 4.0 * PI / (6.0 * originalSamples);
           float saSample = 1.0 / (totalSamples * pdf + 0.0001);
           float mipLevel = roughness == 0.0 ? 0.0 : 0.5 * log2(saSample / saTexel); 

           outputColor += textureLod(u_EnvironmentMap, L, mipLevel).rgb * dotNL;
           totalWeight += dotNL;
        }
    }
    outputColor /= totalWeight;

    imageStore(u_EnvironmentPrefilterMap, cubeCoord, vec4(outputColor, 1.0f));
}