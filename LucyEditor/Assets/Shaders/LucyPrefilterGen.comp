//type compute
#version 450

layout (local_size_x = 32, local_size_y = 32) in;

layout (set = 0, binding = 0) uniform samplerCube u_EnvironmentMap;
layout (set = 0, binding = 1, rgba32f) writeonly uniform imageCube u_EnvironmentPrefilterMap;

layout (push_constant) uniform LucyPrefilterParams {
    //x, y => width, height of mipmap
    //z => roughnessValue;
    vec4 u_PrefilterParams;
};

#define PI 3.1415926535897932384626433832795f
#define TWO_PI 6.283185307179586476925286766559f
#define HALF_PI 1.57079632679489661923132169163975f

float DistributionGGX(float dotNH, float roughness) {
    float r2 = roughness * roughness;
    float dotNH2 = dotNH*dotNH;

    float nom = r2;
    float denom = (dotNH2 * (r2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / denom;
}

// Van Der Corpus sequence
// @see http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
float VdcSequence(uint bits) {
     bits = (bits << 16u) | (bits >> 16u);
     bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
     bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
     bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
     bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
     return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

vec2 Hammersley(uint i, uint N) {
	return vec2(float(i)/float(N), VdcSequence(i));
}

vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness) {
	float a = roughness*roughness;
	
	float phi = 2.0 * PI * Xi.x;
	float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
	float sinTheta = sqrt(1.0 - cosTheta*cosTheta);
	
	// from spherical coordinates to cartesian coordinates - halfway vector
	vec3 H;
	H.x = cos(phi) * sinTheta;
	H.y = sin(phi) * sinTheta;
	H.z = cosTheta;
	
	// from tangent-space H vector to world-space sample vector
	vec3 up = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
	vec3 tangent = normalize(cross(up, N));
	vec3 bitangent = cross(N, tangent);
	
	vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
	return normalize(sampleVec);
}

/*
    Helper function
*/
float max3(vec3 v) {
    return max(max(v.x, v.y), v.z);
}

/*
    Thanks to Alin for these conversion functions
*/
vec3 cubeCoordToWorld(ivec3 cubeCoord, vec2 cubemapSize) {
    vec2 texCoord = vec2(cubeCoord.xy) / cubemapSize;
    texCoord = texCoord  * 2.0 - 1.0;
    switch(cubeCoord.z) {
        case 0: 
            return vec3(1.0, -texCoord.yx); // +x
        case 1: 
            return vec3(-1.0, -texCoord.y, texCoord.x); //-x
        case 2: 
            return vec3(texCoord.x, 1.0, texCoord.y); //+y
        case 3: 
            return vec3(texCoord.x, -1.0, -texCoord.y); //-y
        case 4: 
            return vec3(texCoord.x, -texCoord.y, 1.0); //+z
        case 5: 
            return vec3(-texCoord.xy, -1.0); //-z
    }
    return vec3(0.0);
}

ivec3 texCoordToCube(vec3 texCoord, vec2 cubemapSize) {
    vec3 abst = abs(texCoord);
    texCoord /= max3(abst);

    float cubeFace;
    vec2 uvCoord;
    if (abst.x > abst.y && abst.x > abst.z) {
        // x major
        float negx = step(texCoord.x, 0.0);
        uvCoord = mix(-texCoord.zy, vec2(texCoord.z, -texCoord.y), negx);
        cubeFace = negx;
    } else if (abst.y > abst.z) {
        // y major
        float negy = step(texCoord.y, 0.0);
        uvCoord = mix(texCoord.xz, vec2(texCoord.x, -texCoord.z), negy);
        cubeFace = 2.0 + negy;
    } else {
        // z major
        float negz = step(texCoord.z, 0.0);
        uvCoord = mix(vec2(texCoord.x, -texCoord.y), -texCoord.xy, negz);
        cubeFace = 4.0 + negz;
    }
    uvCoord = (uvCoord + 1.0) * 0.5; // 0..1
    uvCoord = uvCoord * cubemapSize;
    uvCoord = clamp(uvCoord, vec2(0.0), cubemapSize - vec2(1.0));

    return ivec3(ivec2(uvCoord), int(cubeFace));
}

void main() {
    const vec2 cubemapSize = vec2(1024, 1024);
    const float originalSamples = cubemapSize.x * cubemapSize.y;
    const uint totalSamples = 1024u;

    vec2 currentMipMapSize = u_PrefilterParams.xy;
    float currentRoughnessValue = u_PrefilterParams.z;

    ivec3 cubeCoord = ivec3(gl_GlobalInvocationID);
    vec3 worldPos = cubeCoordToWorld(cubeCoord, currentMipMapSize);

    vec3 N = normalize(worldPos);
    // assume view direction always equal to outgoing direction
    vec3 R = N;
    vec3 V = N;

    float roughness = max(currentRoughnessValue, 0.04);
    float totalWeight = 0.0f;
    vec3 outputColor = vec3(0.0f);

    for (uint i = 0; i < totalSamples; i++) {
        vec2 Xi = Hammersley(i, totalSamples);
        vec3 H = ImportanceSampleGGX(Xi, N, roughness);
        float dotHV = dot(H, V);
        vec3 L = normalize(2.0 * dotHV * H - V);

        float dotNL = max(dot(N, L), 0.0);
        if(dotNL > 0.0) {
           float dotNH = max(dot(N, H), 0.0);
           dotHV = max(dotHV, 0.0);

           float D = DistributionGGX(dotNH, roughness);
           float pdf = D * dotNH / (4.0 * dotHV) + 0.0001; 

           float saTexel  = 4.0 * PI / (6.0 * originalSamples);
           float saSample = 1.0 / (totalSamples * pdf + 0.0001);
           float mipLevel = roughness == 0.0 ? 0.0 : 0.5 * log2(saSample / saTexel); 

           outputColor += textureLod(u_EnvironmentMap, L, mipLevel).rgb * dotNL;
           totalWeight += dotNL;
        }
    }
    outputColor /= totalWeight;

    imageStore(u_EnvironmentPrefilterMap, cubeCoord, vec4(outputColor, 1.0f));
}